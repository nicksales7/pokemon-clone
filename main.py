import os
import pygame as py
import random
import time # May use to improve NPC movement later

class Character:
    def __init__(self, image_location, image_width, image_height):
        # Adds attributes of width and height to a characters png image
        self.image = py.image.load(image_location)
        self.image = py.transform.scale(self.image, (image_width, image_height))
        self.rect = self.image.get_rect()
        self.width = self.rect.width
        self.height = self.rect.height


class NPC:
    def __init__(self, image_location, image_width, image_height):
        # Adds attributes of width and height to an NPC's png image
        self.image = py.image.load(image_location)
        self.image = py.transform.scale(self.image, (image_width, image_height))
        self.rect = self.image.get_rect()
        self.width = self.rect.width
        self.height = self.rect.height

def window(screen_width, screen_height, player_start_position_x, player_start_position_y):
    # Initialize the pygame window and sets the title
    py.display.init()
    py.display.set_caption("Pokemon Clone")

    # Sets the users display size 
    window = py.display.set_mode([screen_width,screen_height])
    
    # Use the os module to find the actual path, then assign my_character 
    # to the image
    character_image_directory = os.path.expanduser("~/python-projects/pokemon-clone/assets/default-back.png")
    my_character = Character(character_image_directory, 100, 100)
    
    # Initilizes the NPC's start position at a random location on the screen
    npc_start_position_x = random.randint(1,500)
    npc_start_position_y = random.randint(1,500)
    
    # Use the os module to find the actual path, then assign my_npc 
    # to the image
    npc_image_directory = os.path.expanduser("~/python-projects/pokemon-clone/assets/972-9722069_squirtle-squirtle-pixel-art-grid.png")
    my_npc = NPC(npc_image_directory, 50, 50)


    # Stores the characters movement velocity
    character_velocity = 5
    npc_velocity = 15

    # Initilizes the pygame clock
    clock = py.time.Clock()
    
    # While running is true, window will loop
    running = True
    while running:
        # Fills the window with the grass colour
        window.fill((112,200,160))

        # Draw the character and update the display
        window.blit(my_character.image, (player_start_position_x, player_start_position_y))
        window.blit(my_npc.image, (npc_start_position_x, npc_start_position_y))

       
        # Sets the frame rate to 60fps
        clock.tick(60)

        # Generates random numbers to move the NPC
        random_number = random.randint(1, 50)
        print(random_number)

        # Event loop
        for event in py.event.get():
            if event.type == py.QUIT:
                running == False
                py.quit()
                quit()
            
            # Moves the NPC if a certain number is generated by random_number
            # in a respective direction
            if random_number == 50:
                npc_start_position_x -= npc_velocity
            if random_number == 25:
                npc_start_position_x += npc_velocity
            if random_number == 30:
                npc_start_position_y -= npc_velocity
            if random_number == 10:
                npc_start_position_y += npc_velocity

            # Checks if user presses a key, moves the players x and y
            # using velocity with the respective key and direction
            key_pressed = py.key.get_pressed()

            if key_pressed[py.K_LEFT] or key_pressed[py.K_a]:
                player_start_position_x -= character_velocity
            if key_pressed[py.K_RIGHT] or key_pressed[py.K_d]:
                player_start_position_x += character_velocity
            if key_pressed[py.K_UP] or key_pressed[py.K_w]:
                player_start_position_y -= character_velocity
            if key_pressed[py.K_DOWN] or key_pressed[py.K_s]:
                player_start_position_y += character_velocity
            
            # Draws to the screen
            py.display.update()

    # Quit pygame
    py.quit()

def main():
    # Prompts the user for their desired display size 
    display_width = int(input("Please enter your display width: "))
    display_height = int(input("Please enter your display height: "))
    
    # Initilizes the character at the center of the screen
    player_x = display_width / 2
    player_y = display_height / 2

    window(display_width,display_height, player_x, player_y)

if __name__ == "__main__":
    main()

